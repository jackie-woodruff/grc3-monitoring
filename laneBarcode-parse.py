from bs4 import BeautifulSoup
import pandas as pd
import re
import csv
import json
import sys
import tabulate

# TODO: add Element compatability
# def parse_element_report(file_path):
    
    
def parse_html_report(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        soup = BeautifulSoup(file, 'html.parser')
    
    # get flowcell summary information for PF table (Step1)
    flowcell_summary = {}
    flowcell_table = soup.find('h2', string='Flowcell Summary').find_next('table')
    
    headers = []
    for th in flowcell_table.find_all('th'):
        headers.append(th.text.strip())
    
    values = []
    for td in flowcell_table.find_all('td'):
        values.append(td.text.strip().replace(',', ''))
    
    flowcell_summary = dict(zip(headers, map(int, values)))
    
    # get lane summary information for sample table (Step2)
    lane_summary = []
    lane_table = soup.find('h2', string='Lane Summary').find_next('table')

    headers = [th.get_text(strip=True) for th in lane_table.find_all('th')]
    headers = [h.replace('\n', ' ') for h in headers]
    
    for row in lane_table.find_all('tr')[1:]:  
        cols = row.find_all('td')
        if cols:
            values = []
            for col in cols:
                values.append(col.get_text(strip=True).replace(',', ''))
            row_dict = dict(zip(headers, values))
            row_dict['PF Clusters'] = int(row_dict['PF Clusters'])  # needs to be converted to an int before filtering
            lane_summary.append(row_dict)
    
    # get top unknown barcode information for step3
    unknown_barcodes = []
    barcode_table = soup.find('h2', string='Top Unknown Barcodes').find_next('table')
    barcode_rows = barcode_table.find_all('tr')
    lane_number = None

    for row in barcode_rows[1:]:
        cols = row.find_all(['td', 'th'])
        if len(cols) == 1:
            lane_number = cols[0].text.strip()
        elif len(cols) == 2:
            count, sequence = cols[0].text.strip().replace(',', ''), cols[1].text.strip()
            unknown_barcodes.append({'Lane': lane_number, 'Count': int(count), 'Sequence': sequence})
    
    return flowcell_summary, lane_summary, unknown_barcodes



if __name__ == '__main__':
    if len(sys.argv) < 4:
        print('''
This script scans through the demultiplexing report generated by Illumina's bcl2fastq software to highlight any 
samples that might have incorrect barcodes or may not be in the pool at all. By using a user-specified threshold,
this script is able to be run on any size sequencing run.
              
Usage: python3 laneBarcode-parse.py <machine-name> <run_name> <threshold>
              
Arguments:
    <machine-name>  The sequencing machine (e.g., NextSeq2K, NovaSeq, MiSeq)
    <run_name>      The name of the sequencing run
    <threshold>     The number of reads to filter by
                
Example:
    python3 laneBarcode-parse.py NextSeq2K run_12345 1000000
        ''')
        sys.exit(1)

    machine = sys.argv[1]
    run_name = sys.argv[2]
    threshold = int(sys.argv[3])
    
    valid_machines = {'Miseq', 'NextSeq2K', 'Novaseq'}
    if machine not in valid_machines:
        print(f"Error: Invalid machine name '{machine}'. Valid options: {', '.join(valid_machines)}.")
        sys.exit(1)
        
    # flowcell information is found after the last - for the Miseq and the last _ for the others
    if machine == 'Miseq': flowcell_id = run_name.split('-')[-1] 
    else: flowcell_id = run_name.split('_')[-1] 

    file_path = f'/data01/grc3_data01/bcl2fastq/{machine}/{run_name}/Reports/html/{flowcell_id}/all/all/all/laneBarcode.html'
    flowcell_summary, lane_summary, unknown_barcodes = parse_html_report(file_path)
    
    # step1: PF summary
    raw_clusters = flowcell_summary.get('Clusters (Raw)', 0)
    pf_clusters = flowcell_summary.get('Clusters(PF)', 0)

    if raw_clusters == 0: percentage_pf = 'N/A'
    else: percentage_pf = (pf_clusters / raw_clusters * 100) if raw_clusters else 0

    # add commas for readability
    formatted_summary = [
        ('Raw Clusters', f'{raw_clusters:,}'),
        ('PF Clusters', f'{pf_clusters:,}'),
        ('Percentage PF', f'{percentage_pf:.2f}%')
    ]
    print('\n\033[1mFlowcell Summary:\033[0m')
    print(tabulate.tabulate(formatted_summary, tablefmt='grid'))
    
    # step2: sample information for those that are below the threshold
    filtered_lanes = [
        { 'Sample': lane['Sample'], 'Barcode sequence': lane['Barcode sequence'], 'PF Clusters': lane['PF Clusters'] }
        for lane in lane_summary if lane['PF Clusters'] < threshold and lane['Sample'] != 'Undetermined'
    ] # TODO: add commas for easier readability
    
    print('\n\033[1mSample Information:\033[0m')
    if filtered_lanes:
        print(tabulate.tabulate(filtered_lanes, headers='keys', tablefmt='grid'))
    else:
        print(f'No samples found below the threshold of {threshold}.')

    # step3: top unknown barcodes that are above the threshold
    filtered_barcodes = [barcode for barcode in unknown_barcodes if barcode['Count'] > threshold]

    print('\n\033[1mTop Unknown Barcode Information:\033[0m')
    if filtered_barcodes:
        print(tabulate.tabulate(filtered_barcodes, headers='keys', tablefmt='grid'))
    else:
        print(f'No top unknown barcodes found above the threshold of {threshold}.')